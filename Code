import { useState, useEffect } from 'react';
import { Button } from "/components/ui/button";
import { Input } from "/components/ui/input";
import { Label } from "/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "/components/ui/card";
import { Users, Clock, Home, ArrowRight, MapPin } from "lucide-react";

// Dummy data for bus routes with real-time tracking
const busRoutes = [
  {
    id: 1,
    name: "Karur to Trichy",
    departure: "06:30 AM",
    arrival: "08:15 AM",
    duration: "1h 45m",
    stops: [
      { name: "Karur Bus Stand", time: "06:30 AM" },
      { name: "Kulithalai", time: "07:15 AM" },
      { name: "Manapparai", time: "07:45 AM" },
      { name: "Trichy Central", time: "08:15 AM" }
    ],
    frequency: "Every 30 mins",
    currentPosition: 1, // Index of current stop
    lastUpdated: "2 mins ago"
  },
  {
    id: 2,
    name: "Trichy to Karur",
    departure: "04:00 PM",
    arrival: "05:45 PM",
    duration: "1h 45m",
    stops: [
      { name: "Trichy Central", time: "04:00 PM" },
      { name: "Manapparai", time: "04:30 PM" },
      { name: "Kulithalai", time: "05:00 PM" },
      { name: "Karur Bus Stand", time: "05:45 PM" }
    ],
    frequency: "Every 30 mins",
    currentPosition: 0,
    lastUpdated: "5 mins ago"
  },
  {
    id: 3,
    name: "Special Weekend Route",
    departure: "07:00 AM",
    arrival: "08:45 AM",
    duration: "1h 45m",
    stops: [
      { name: "Karur Bus Stand", time: "07:00 AM" },
      { name: "Kulithalai", time: "07:45 AM" },
      { name: "Manapparai", time: "08:15 AM" },
      { name: "Trichy Central", time: "08:45 AM" }
    ],
    frequency: "Sat, Sun only",
    currentPosition: 2,
    lastUpdated: "Just now"
  }
];

export default function BusRouteApp() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [routes, setRoutes] = useState(busRoutes);
  const [selectedRoute, setSelectedRoute] = useState<number | null>(null);

  // Simulate real-time updates
  useEffect(() => {
    if (!isLoggedIn) return;
    
    const interval = setInterval(() => {
      setRoutes(prevRoutes => 
        prevRoutes.map(route => {
          // Simulate bus movement (advance position occasionally)
          const shouldMove = Math.random() > 0.7;
          const newPosition = shouldMove 
            ? Math.min(route.currentPosition + 1, route.stops.length - 1)
            : route.currentPosition;
          
          return {
            ...route,
            currentPosition: newPosition,
            lastUpdated: "Just now"
          };
        })
      );
    }, 10000); // Update every 10 seconds

    return () => clearInterval(interval);
  }, [isLoggedIn]);

  // Check if user is already logged in
  useEffect(() => {
    const storedUser = localStorage.getItem('busAppUser');
    if (storedUser) {
      setIsLoggedIn(true);
    }
  }, []);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Simple validation (in real app, this would be server-side)
    if (username === 'student' && password === 'college123') {
      localStorage.setItem('busAppUser', username);
      setIsLoggedIn(true);
      setError('');
    } else {
      setError('Invalid credentials. Use "student" / "college123"');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('busAppUser');
    setIsLoggedIn(false);
    setUsername('');
    setPassword('');
    setSelectedRoute(null);
  };

  const selectRoute = (routeId: number) => {
    setSelectedRoute(routeId);
  };

  const closeTracking = () => {
    setSelectedRoute(null);
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold text-indigo-700">College Bus Navigator</CardTitle>
            <CardDescription>Shrimati Indira Gandhi College</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleLogin} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="username">Username</Label>
                <Input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="Enter username"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Enter password"
                  required
                />
              </div>
              {error && <p className="text-red-500 text-sm">{error}</p>}
              <Button type="submit" className="w-full bg-indigo-600 hover:bg-indigo-700">
                Login
              </Button>
            </form>
            <div className="mt-4 text-center text-sm text-gray-500">
              <p>Demo credentials: student / college123</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Show real-time tracking for selected route
  if (selectedRoute !== null) {
    const route = routes.find(r => r.id === selectedRoute);
    if (!route) return null;

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
        <div className="max-w-4xl mx-auto">
          <header className="flex justify-between items-center py-6 mb-6">
            <Button 
              onClick={closeTracking} 
              variant="outline" 
              className="border-indigo-600 text-indigo-600 hover:bg-indigo-50"
            >
              ‚Üê Back to Routes
            </Button>
            <div className="flex items-center space-x-4">
              <div className="flex items-center bg-white rounded-full px-4 py-2 shadow-sm">
                <Users className="text-indigo-600 mr-2" size={20} />
                <span className="font-medium">Welcome, Student!</span>
              </div>
              <Button 
                onClick={handleLogout} 
                variant="outline" 
                className="border-indigo-600 text-indigo-600 hover:bg-indigo-50"
              >
                Logout
              </Button>
            </div>
          </header>

          <main>
            <Card className="mb-6 bg-white shadow-md">
              <CardHeader>
                <CardTitle className="text-xl text-indigo-700 flex items-center">
                  <MapPin className="mr-2" />
                  Real-Time Tracking: {route.name}
                </CardTitle>
                <CardDescription>
                  Last updated: {route.lastUpdated}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative pt-6">
                  {/* Route line */}
                  <div className="absolute left-4 top-0 bottom-0 w-1 bg-indigo-200"></div>
                  
                  {/* Stops */}
                  <div className="space-y-8">
                    {route.stops.map((stop, index) => {
                      const isCurrent = index === route.currentPosition;
                      const isPassed = index < route.currentPosition;
                      
                      return (
                        <div key={index} className="relative flex items-start">
                          {/* Stop indicator */}
                          <div className={`absolute left-0 w-8 h-8 rounded-full flex items-center justify-center z-10
                            ${isCurrent ? 'bg-indigo-600 border-4 border-indigo-300' : ''}
                            ${isPassed ? 'bg-green-500' : 'bg-white border-2 border-indigo-300'}`}
                          >
                            {isPassed && (
                              <div className="w-3 h-3 bg-white rounded-full"></div>
                            )}
                          </div>
                          
                          {/* Stop details */}
                          <div className={`ml-12 p-4 rounded-lg w-full
                            ${isCurrent ? 'bg-indigo-50 border border-indigo-200' : ''}`}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <h3 className={`font-bold ${isCurrent ? 'text-indigo-700' : 'text-gray-700'}`}>
                                  {stop.name}
                                </h3>
                                <p className="text-sm text-gray-500">Scheduled: {stop.time}</p>
                              </div>
                              {isCurrent && (
                                <span className="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full">
                                  Current Location
                                </span>
                              )}
                              {isPassed && (
                                <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                                  Passed
                                </span>
                              )}
                            </div>
                            
                            {isCurrent && (
                              <div className="mt-3 p-3 bg-white rounded border border-indigo-100">
                                <p className="text-sm font-medium text-indigo-700">Bus is currently at this stop</p>
                                <p className="text-xs text-gray-500 mt-1">
                                  Next stop: {route.stops[index + 1]?.name || "Destination"}
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="bg-white shadow-sm">
                <CardContent className="p-4">
                  <p className="text-sm text-gray-500">Departure</p>
                  <p className="font-bold">{route.departure}</p>
                </CardContent>
              </Card>
              <Card className="bg-white shadow-sm">
                <CardContent className="p-4">
                  <p className="text-sm text-gray-500">Arrival</p>
                  <p className="font-bold">{route.arrival}</p>
                </CardContent>
              </Card>
              <Card className="bg-white shadow-sm">
                <CardContent className="p-4">
                  <p className="text-sm text-gray-500">Duration</p>
                  <p className="font-bold">{route.duration}</p>
                </CardContent>
              </Card>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <header className="flex justify-between items-center py-6 mb-6">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-indigo-800">College Bus Navigator</h1>
            <p className="text-gray-600">Shrimati Indira Gandhi College</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center bg-white rounded-full px-4 py-2 shadow-sm">
              <Users className="text-indigo-600 mr-2" size={20} />
              <span className="font-medium">Welcome, Student!</span>
            </div>
            <Button 
              onClick={handleLogout} 
              variant="outline" 
              className="border-indigo-600 text-indigo-600 hover:bg-indigo-50"
            >
              Logout
            </Button>
          </div>
        </header>

        {/* Main Content */}
        <main>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <Card className="bg-white shadow-md">
              <CardHeader className="bg-indigo-50 rounded-t-lg">
                <CardTitle className="flex items-center text-indigo-700">
                  <Home className="mr-2" />
                  Karur Bus Stand
                </CardTitle>
                <CardDescription>Starting Point</CardDescription>
              </CardHeader>
              <CardContent className="pt-4">
                <p className="text-gray-700">Main bus stand in Karur city center</p>
                <p className="text-sm text-gray-500 mt-2">Address: NH47, Karur, Tamil Nadu 639001</p>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-md">
              <CardHeader className="bg-indigo-50 rounded-t-lg">
                <CardTitle className="flex items-center text-indigo-700">
                  <ArrowRight className="mr-2" />
                  Trichy College
                </CardTitle>
                <CardDescription>Destination</CardDescription>
              </CardHeader>
              <CardContent className="pt-4">
                <p className="text-gray-700">Shrimati Indira Gandhi College</p>
                <p className="text-sm text-gray-500 mt-2">Address: Trichy - Karur Main Rd, Thiruchirappalli</p>
              </CardContent>
            </Card>
          </div>

          <h2 className="text-xl font-bold text-gray-800 mb-4">Available Bus Routes</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {routes.map((route) => (
              <Card key={route.id} className="bg-white shadow-md hover:shadow-lg transition-shadow">
                <CardHeader className="border-b">
                  <CardTitle className="text-lg text-indigo-700">{route.name}</CardTitle>
                  <CardDescription className="flex items-center">
                    <Clock className="mr-1" size={16} />
                    {route.frequency}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pt-4">
                  <div className="flex justify-between mb-3">
                    <div>
                      <p className="font-medium">Departure</p>
                      <p className="text-lg">{route.departure}</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">Arrival</p>
                      <p className="text-lg">{route.arrival}</p>
                    </div>
                  </div>
                  
                  <div className="mb-3">
                    <p className="font-medium text-sm text-gray-600">Duration</p>
                    <p>{route.duration}</p>
                  </div>
                  
                  <div className="mb-4">
                    <p className="font-medium text-sm text-gray-600 mb-1">Current Location</p>
                    <div className="flex items-center">
                      <MapPin className="text-indigo-600 mr-1" size={16} />
                      <span className="font-medium">
                        {route.stops[route.currentPosition]?.name || "Unknown"}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500">Updated: {route.lastUpdated}</p>
                  </div>
                  
                  <div className="mb-4">
                    <p className="font-medium text-sm text-gray-600 mb-1">Stops</p>
                    <div className="flex flex-wrap gap-2">
                      {route.stops.map((stop, index) => (
                        <span 
                          key={index} 
                          className={`text-xs px-2 py-1 rounded
                            ${index === route.currentPosition 
                              ? 'bg-indigo-600 text-white' 
                              : index < route.currentPosition 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-indigo-100 text-indigo-800'}`}
                        >
                          {stop.name}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  <Button 
                    onClick={() => selectRoute(route.id)}
                    className="w-full bg-indigo-600 hover:bg-indigo-700"
                  >
                    Track Bus Location
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </main>

        {/* Footer */}
        <footer className="mt-12 py-6 text-center text-gray-600 border-t">
          <p>¬© 2023 Shrimati Indira Gandhi College Bus Service</p>
          <p className="text-sm mt-2">For any queries, contact: transport@sigc.edu</p>
        </footer>
      </div>
    </div>
  );
}
